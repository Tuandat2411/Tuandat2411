 #include "ros/ros.h"
 #include "std_msgs/String.h"
 #include <sstream>
  
   int main(int argc, char **argv)
  {
     
     ros::init(argc, argv, "talker");
   
     ros::NodeHandle n;
   
     ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
   
     ros::Rate loop_rate(10);
   
     
     int count = 0;
     while (ros::ok())
     {
       
       std_msgs::String msg;
       std::stringstream ss;
       ss << "hello world " << count;
       msg.data = ss.str();
       ROS_INFO("%s", msg.data.c_str());
   
       chatter_pub.publish(msg);
  
       ros::spinOnce();
 
       loop_rate.sleep();
       ++count;
    }
  
  
    return 0;
  }


#include "ros/ros.h"
#include "std_msgs/String.h"
 

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO("I heard: [%s]", msg->data.c_str());
}
  
int main(int argc, char **argv)
   {

     ros::init(argc, argv, "listener");
     ros::NodeHandle n;
     ros::Subscriber sub = n.subscribe("chatter", 1000, chatterCallback);
     ros::spin();
     return 0;
}

add_executable(talker src/talker.cpp)
target_link_libraries(talker ${catkin_LIBRARIES})



add_executable(listener src/listener.cpp)
target_link_libraries(listener ${catkin_LIBRARIES})

catkin_install_python(PROGRAMS scripts/talker.py scripts/listener.py
  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

